{
  "version": 3,
  "sources": ["../../vuetify/src/components/VSelect/VSelect.tsx", "../../vuetify/src/components/VCheckbox/VCheckbox.tsx", "../../vuetify/src/components/VSelectionControl/VSelectionControl.tsx", "../../vuetify/src/components/VSelectionControlGroup/VSelectionControlGroup.tsx", "../../vuetify/src/components/VCheckbox/VCheckboxBtn.tsx", "../../vuetify/src/components/VMenu/VMenu.tsx", "../../vuetify/src/components/VVirtualScroll/VVirtualScroll.tsx", "../../vuetify/src/components/VVirtualScroll/VVirtualScrollItem.tsx", "../../vuetify/src/composables/virtual.ts", "../../vuetify/src/components/VSelect/useScrolling.ts"],
  "sourcesContent": ["// Styles\nimport './VSelect.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VCheckboxBtn } from '@/components/VCheckbox'\nimport { VChip } from '@/components/VChip'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VIcon } from '@/components/VIcon'\nimport { VList, VListItem } from '@/components/VList'\nimport { VMenu } from '@/components/VMenu'\nimport { makeVTextFieldProps, VTextField } from '@/components/VTextField/VTextField'\nimport { VVirtualScroll } from '@/components/VVirtualScroll'\n\n// Composables\nimport { useScrolling } from './useScrolling'\nimport { useForm } from '@/composables/form'\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { IconValue } from '@/composables/icons'\nimport { makeItemsProps, useItems } from '@/composables/list-items'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { makeTransitionProps } from '@/composables/transition'\n\n// Utilities\nimport { computed, mergeProps, ref, shallowRef, watch } from 'vue'\nimport {\n  deepEqual,\n  genericComponent,\n  getPropertyFromItem,\n  IN_BROWSER,\n  matchesSelector,\n  omit,\n  propsFactory,\n  useRender,\n  wrapInArray,\n} from '@/util'\n\n// Types\nimport type { Component, PropType } from 'vue'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport type { ListItem } from '@/composables/list-items'\nimport type { GenericProps } from '@/util'\n\ntype Primitive = string | number | boolean | symbol\n\ntype Val <T, ReturnObject extends boolean> = [T] extends [Primitive]\n  ? T\n  : (ReturnObject extends true ? T : any)\n\ntype Value <T, ReturnObject extends boolean, Multiple extends boolean> =\n  Multiple extends true\n    ? readonly Val<T, ReturnObject>[]\n    : Val<T, ReturnObject> | null\n\nexport const makeSelectProps = propsFactory({\n  chips: Boolean,\n  closableChips: Boolean,\n  closeText: {\n    type: String,\n    default: '$vuetify.close',\n  },\n  openText: {\n    type: String,\n    default: '$vuetify.open',\n  },\n  eager: Boolean,\n  hideNoData: Boolean,\n  hideSelected: Boolean,\n  menu: Boolean,\n  menuIcon: {\n    type: IconValue,\n    default: '$dropdown',\n  },\n  menuProps: {\n    type: Object as PropType<VMenu['$props']>,\n  },\n  multiple: Boolean,\n  noDataText: {\n    type: String,\n    default: '$vuetify.noDataText',\n  },\n  openOnClear: Boolean,\n  valueComparator: {\n    type: Function as PropType<typeof deepEqual>,\n    default: deepEqual,\n  },\n  itemColor: String,\n\n  ...makeItemsProps({ itemChildren: false }),\n}, 'Select')\n\nexport const makeVSelectProps = propsFactory({\n  ...makeSelectProps(),\n  ...omit(makeVTextFieldProps({\n    modelValue: null,\n    role: 'button',\n  }), ['validationValue', 'dirty', 'appendInnerIcon']),\n  ...makeTransitionProps({ transition: { component: VDialogTransition as Component } }),\n}, 'VSelect')\n\nexport const VSelect = genericComponent<new <\n  T extends readonly any[],\n  Item = T extends readonly (infer U)[] ? U : never,\n  ReturnObject extends boolean = false,\n  Multiple extends boolean = false,\n  V extends Value<Item, ReturnObject, Multiple> = Value<Item, ReturnObject, Multiple>\n>(\n  props: {\n    items?: T\n    returnObject?: ReturnObject\n    multiple?: Multiple\n    modelValue?: V | null\n    'onUpdate:modelValue'?: (val: V) => void\n  },\n  slots: Omit<VInputSlots & VFieldSlots, 'default'> & {\n    item: { item: ListItem<Item>, index: number, props: Record<string, unknown> }\n    chip: { item: ListItem<Item>, index: number, props: Record<string, unknown> }\n    selection: { item: ListItem<Item>, index: number }\n    'prepend-item': never\n    'append-item': never\n    'no-data': never\n  }\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VSelect',\n\n  props: makeVSelectProps(),\n\n  emits: {\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (val: any) => true,\n    'update:menu': (val: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const { t } = useLocale()\n    const vTextFieldRef = ref()\n    const vMenuRef = ref<VMenu>()\n    const vVirtualScrollRef = ref<VVirtualScroll>()\n    const _menu = useProxiedModel(props, 'menu')\n    const menu = computed({\n      get: () => _menu.value,\n      set: v => {\n        if (_menu.value && !v && vMenuRef.value?.Î¨openChildren) return\n        _menu.value = v\n      },\n    })\n    const { items, transformIn, transformOut } = useItems(props)\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      [],\n      v => transformIn(v === null ? [null] : wrapInArray(v)),\n      v => {\n        const transformed = transformOut(v)\n        return props.multiple ? transformed : (transformed[0] ?? null)\n      }\n    )\n    const form = useForm()\n    const selections = computed(() => {\n      return model.value.map(v => {\n        return items.value.find(item => {\n          const itemRawValue = getPropertyFromItem(item.raw, props.itemValue)\n          const modelRawValue = getPropertyFromItem(v.raw, props.itemValue)\n\n          if (itemRawValue === undefined || modelRawValue === undefined) return false\n\n          return props.returnObject\n            ? props.valueComparator(itemRawValue, modelRawValue)\n            : props.valueComparator(item.value, v.value)\n        }) || v\n      })\n    })\n    const selected = computed(() => selections.value.map(selection => selection.props.value))\n    const isFocused = shallowRef(false)\n    const label = computed(() => menu.value ? props.closeText : props.openText)\n\n    let keyboardLookupPrefix = ''\n    let keyboardLookupLastTime: number\n\n    const displayItems = computed(() => {\n      if (props.hideSelected) {\n        return items.value.filter(item => !selections.value.some(s => s === item))\n      }\n      return items.value\n    })\n\n    const menuDisabled = computed(() => (\n      (props.hideNoData && !items.value.length) ||\n      props.readonly || form?.isReadonly.value\n    ))\n\n    const listRef = ref<VList>()\n    const { onListScroll, onListKeydown } = useScrolling(listRef, vTextFieldRef)\n    function onClear (e: MouseEvent) {\n      if (props.openOnClear) {\n        menu.value = true\n      }\n    }\n    function onMousedownControl () {\n      if (menuDisabled.value) return\n\n      menu.value = !menu.value\n    }\n    function onKeydown (e: KeyboardEvent) {\n      if (!e.key || props.readonly || form?.isReadonly.value) return\n\n      if (['Enter', ' ', 'ArrowDown', 'ArrowUp', 'Home', 'End'].includes(e.key)) {\n        e.preventDefault()\n      }\n\n      if (['Enter', 'ArrowDown', ' '].includes(e.key)) {\n        menu.value = true\n      }\n\n      if (['Escape', 'Tab'].includes(e.key)) {\n        menu.value = false\n      }\n\n      if (e.key === 'Home') {\n        listRef.value?.focus('first')\n      } else if (e.key === 'End') {\n        listRef.value?.focus('last')\n      }\n\n      // html select hotkeys\n      const KEYBOARD_LOOKUP_THRESHOLD = 1000 // milliseconds\n\n      function checkPrintable (e: KeyboardEvent) {\n        const isPrintableChar = e.key.length === 1\n        const noModifier = !e.ctrlKey && !e.metaKey && !e.altKey\n        return isPrintableChar && noModifier\n      }\n\n      if (props.multiple || !checkPrintable(e)) return\n\n      const now = performance.now()\n      if (now - keyboardLookupLastTime > KEYBOARD_LOOKUP_THRESHOLD) {\n        keyboardLookupPrefix = ''\n      }\n      keyboardLookupPrefix += e.key.toLowerCase()\n      keyboardLookupLastTime = now\n\n      const item = items.value.find(item => item.title.toLowerCase().startsWith(keyboardLookupPrefix))\n      if (item !== undefined) {\n        model.value = [item]\n      }\n    }\n    function select (item: ListItem) {\n      if (props.multiple) {\n        const index = selected.value.findIndex(selection => props.valueComparator(selection, item.value))\n\n        if (index === -1) {\n          model.value = [...model.value, item]\n        } else {\n          const value = [...model.value]\n          value.splice(index, 1)\n          model.value = value\n        }\n      } else {\n        model.value = [item]\n        menu.value = false\n      }\n    }\n    function onBlur (e: FocusEvent) {\n      if (!listRef.value?.$el.contains(e.relatedTarget as HTMLElement)) {\n        menu.value = false\n      }\n    }\n    function onAfterLeave () {\n      if (isFocused.value) {\n        vTextFieldRef.value?.focus()\n      }\n    }\n    function onFocusin (e: FocusEvent) {\n      isFocused.value = true\n    }\n    function onModelUpdate (v: any) {\n      if (v == null) model.value = []\n      else if (matchesSelector(vTextFieldRef.value, ':autofill') || matchesSelector(vTextFieldRef.value, ':-webkit-autofill')) {\n        const item = items.value.find(item => item.title === v)\n        if (item) {\n          select(item)\n        }\n      } else if (vTextFieldRef.value) {\n        vTextFieldRef.value.value = ''\n      }\n    }\n\n    watch(menu, () => {\n      if (!props.hideSelected && menu.value && selections.value.length) {\n        const index = displayItems.value.findIndex(\n          item => selections.value.some(s => item.value === s.value)\n        )\n        IN_BROWSER && window.requestAnimationFrame(() => {\n          index >= 0 && vVirtualScrollRef.value?.scrollToIndex(index)\n        })\n      }\n    })\n\n    useRender(() => {\n      const hasChips = !!(props.chips || slots.chip)\n      const hasList = !!(\n        (!props.hideNoData || displayItems.value.length) ||\n        slots['prepend-item'] ||\n        slots['append-item'] ||\n        slots['no-data']\n      )\n      const isDirty = model.value.length > 0\n      const [textFieldProps] = VTextField.filterProps(props)\n\n      const placeholder = isDirty || (\n        !isFocused.value &&\n        props.label &&\n        !props.persistentPlaceholder\n      ) ? undefined : props.placeholder\n\n      return (\n        <VTextField\n          ref={ vTextFieldRef }\n          { ...textFieldProps }\n          modelValue={ model.value.map(v => v.props.value).join(', ') }\n          onUpdate:modelValue={ onModelUpdate }\n          v-model:focused={ isFocused.value }\n          validationValue={ model.externalValue }\n          dirty={ isDirty }\n          class={[\n            'v-select',\n            {\n              'v-select--active-menu': menu.value,\n              'v-select--chips': !!props.chips,\n              [`v-select--${props.multiple ? 'multiple' : 'single'}`]: true,\n              'v-select--selected': model.value.length,\n              'v-select--selection-slot': !!slots.selection,\n            },\n            props.class,\n          ]}\n          style={ props.style }\n          inputmode=\"none\"\n          placeholder={ placeholder }\n          onClick:clear={ onClear }\n          onMousedown:control={ onMousedownControl }\n          onBlur={ onBlur }\n          onKeydown={ onKeydown }\n          aria-label={ t(label.value) }\n          title={ t(label.value) }\n        >\n          {{\n            ...slots,\n            default: () => (\n              <>\n                <VMenu\n                  ref={ vMenuRef }\n                  v-model={ menu.value }\n                  activator=\"parent\"\n                  contentClass=\"v-select__content\"\n                  disabled={ menuDisabled.value }\n                  eager={ props.eager }\n                  maxHeight={ 310 }\n                  openOnClick={ false }\n                  closeOnContentClick={ false }\n                  transition={ props.transition }\n                  onAfterLeave={ onAfterLeave }\n                  { ...props.menuProps }\n                >\n                  { hasList && (\n                    <VList\n                      ref={ listRef }\n                      selected={ selected.value }\n                      selectStrategy={ props.multiple ? 'independent' : 'single-independent' }\n                      onMousedown={ (e: MouseEvent) => e.preventDefault() }\n                      onKeydown={ onListKeydown }\n                      onFocusin={ onFocusin }\n                      onScrollPassive={ onListScroll }\n                      tabindex=\"-1\"\n                      color={ props.itemColor ?? props.color }\n                    >\n                      { slots['prepend-item']?.() }\n\n                      { !displayItems.value.length && !props.hideNoData && (slots['no-data']?.() ?? (\n                        <VListItem title={ t(props.noDataText) } />\n                      ))}\n\n                      <VVirtualScroll ref={ vVirtualScrollRef } renderless items={ displayItems.value }>\n                        { ({ item, index, itemRef }) => {\n                          const itemProps = mergeProps(item.props, {\n                            ref: itemRef,\n                            key: index,\n                            onClick: () => select(item),\n                          })\n\n                          return slots.item?.({\n                            item,\n                            index,\n                            props: itemProps,\n                          }) ?? (\n                            <VListItem { ...itemProps }>\n                              {{\n                                prepend: ({ isSelected }) => (\n                                  <>\n                                    { props.multiple && !props.hideSelected ? (\n                                      <VCheckboxBtn\n                                        key={ item.value }\n                                        modelValue={ isSelected }\n                                        ripple={ false }\n                                        tabindex=\"-1\"\n                                      />\n                                    ) : undefined }\n\n                                    { item.props.prependIcon && (\n                                      <VIcon icon={ item.props.prependIcon } />\n                                    )}\n                                  </>\n                                ),\n                              }}\n                            </VListItem>\n                          )\n                        }}\n                      </VVirtualScroll>\n\n                      { slots['append-item']?.() }\n                    </VList>\n                  )}\n                </VMenu>\n\n                { selections.value.map((item, index) => {\n                  function onChipClose (e: Event) {\n                    e.stopPropagation()\n                    e.preventDefault()\n\n                    select(item)\n                  }\n\n                  const slotProps = {\n                    'onClick:close': onChipClose,\n                    onMousedown (e: MouseEvent) {\n                      e.preventDefault()\n                      e.stopPropagation()\n                    },\n                    modelValue: true,\n                    'onUpdate:modelValue': undefined,\n                  }\n\n                  return (\n                    <div key={ item.value } class=\"v-select__selection\">\n                      { hasChips ? (\n                        !slots.chip ? (\n                          <VChip\n                            key=\"chip\"\n                            closable={ props.closableChips }\n                            size=\"small\"\n                            text={ item.title }\n                            { ...slotProps }\n                          />\n                        ) : (\n                          <VDefaultsProvider\n                            key=\"chip-defaults\"\n                            defaults={{\n                              VChip: {\n                                closable: props.closableChips,\n                                size: 'small',\n                                text: item.title,\n                              },\n                            }}\n                          >\n                            { slots.chip?.({ item, index, props: slotProps }) }\n                          </VDefaultsProvider>\n                        )\n                      ) : (\n                        slots.selection?.({ item, index }) ?? (\n                          <span class=\"v-select__selection-text\">\n                            { item.title }\n                            { props.multiple && (index < selections.value.length - 1) && (\n                              <span class=\"v-select__selection-comma\">,</span>\n                            )}\n                          </span>\n                        )\n                      )}\n                    </div>\n                  )\n                })}\n              </>\n            ),\n            'append-inner': (...args) => (\n              <>\n                { slots['append-inner']?.(...args) }\n                { props.menuIcon ? (\n                  <VIcon\n                    class=\"v-select__menu-icon\"\n                    icon={ props.menuIcon }\n                  />\n                ) : undefined }\n              </>\n            ),\n          }}\n        </VTextField>\n      )\n    })\n\n    return forwardRefs({\n      isFocused,\n      menu,\n      select,\n    }, vTextFieldRef)\n  },\n})\n\nexport type VSelect = InstanceType<typeof VSelect>\n", "// Styles\nimport './VCheckbox.sass'\n\n// Components\nimport { makeVCheckboxBtnProps, VCheckboxBtn } from './VCheckboxBtn'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\n\n// Composables\nimport { useFocus } from '@/composables/focus'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed } from 'vue'\nimport { filterInputAttrs, genericComponent, getUid, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { VSelectionControlSlots } from '../VSelectionControl/VSelectionControl'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nexport type VCheckboxSlots = VInputSlots & VSelectionControlSlots\n\nexport const makeVCheckboxProps = propsFactory({\n  ...makeVInputProps(),\n  ...omit(makeVCheckboxBtnProps(), ['inline']),\n}, 'VCheckbox')\n\nexport const VCheckbox = genericComponent<VCheckboxSlots>()({\n  name: 'VCheckbox',\n\n  inheritAttrs: false,\n\n  props: makeVCheckboxProps(),\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n    'update:focused': (focused: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const { isFocused, focus, blur } = useFocus(props)\n\n    const uid = getUid()\n    const id = computed(() => props.id || `checkbox-${uid}`)\n\n    useRender(() => {\n      const [rootAttrs, controlAttrs] = filterInputAttrs(attrs)\n      const [inputProps, _1] = VInput.filterProps(props)\n      const [checkboxProps, _2] = VCheckboxBtn.filterProps(props)\n\n      return (\n        <VInput\n          class={[\n            'v-checkbox',\n            props.class,\n          ]}\n          { ...rootAttrs }\n          { ...inputProps }\n          v-model={ model.value }\n          id={ id.value }\n          focused={ isFocused.value }\n          style={ props.style }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              messagesId,\n              isDisabled,\n              isReadonly,\n            }) => (\n              <VCheckboxBtn\n                { ...checkboxProps }\n                id={ id.value }\n                aria-describedby={ messagesId.value }\n                disabled={ isDisabled.value }\n                readonly={ isReadonly.value }\n                { ...controlAttrs }\n                v-model={ model.value }\n                onFocus={ focus }\n                onBlur={ blur }\n                v-slots={ slots }\n              />\n            ),\n          }}\n        </VInput>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VCheckbox = InstanceType<typeof VCheckbox>\n", "// Styles\nimport './VSelectionControl.sass'\n\n// Components\nimport { VIcon } from '@/components/VIcon'\nimport { VLabel } from '@/components/VLabel'\nimport { makeSelectionControlGroupProps, VSelectionControlGroupSymbol } from '@/components/VSelectionControlGroup/VSelectionControlGroup'\n\n// Composables\nimport { useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { useDensity } from '@/composables/density'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Directives\nimport { Ripple } from '@/directives/ripple'\n\n// Utilities\nimport { computed, inject, nextTick, ref, shallowRef } from 'vue'\nimport {\n  filterInputAttrs,\n  genericComponent,\n  getUid,\n  matchesSelector,\n  propsFactory,\n  useRender,\n  wrapInArray,\n} from '@/util'\n\n// Types\nimport type { CSSProperties, ExtractPropTypes, Ref, VNode, WritableComputedRef } from 'vue'\nimport type { IconValue } from '@/composables/icons'\nimport type { GenericProps } from '@/util'\n\nexport type SelectionControlSlot = {\n  model: WritableComputedRef<any>\n  textColorClasses: Ref<string[]>\n  textColorStyles: Ref<CSSProperties>\n  inputNode: VNode\n  icon: IconValue | undefined\n  props: {\n    onBlur: (e: Event) => void\n    onFocus: (e: FocusEvent) => void\n    id: string\n  }\n}\n\nexport type VSelectionControlSlots = {\n  default: never\n  label: { label: string | undefined, props: Record<string, unknown> }\n  input: SelectionControlSlot\n}\n\nexport const makeVSelectionControlProps = propsFactory({\n  label: String,\n  trueValue: null,\n  falseValue: null,\n  value: null,\n\n  ...makeComponentProps(),\n  ...makeSelectionControlGroupProps(),\n}, 'VSelectionControl')\n\nexport function useSelectionControl (\n  props: ExtractPropTypes<ReturnType<typeof makeVSelectionControlProps>> & {\n    'onUpdate:modelValue': ((val: any) => void) | undefined\n  }\n) {\n  const group = inject(VSelectionControlGroupSymbol, undefined)\n  const { densityClasses } = useDensity(props)\n  const modelValue = useProxiedModel(props, 'modelValue')\n  const trueValue = computed(() => (\n    props.trueValue !== undefined ? props.trueValue\n    : props.value !== undefined ? props.value\n    : true\n  ))\n  const falseValue = computed(() => props.falseValue !== undefined ? props.falseValue : false)\n  const isMultiple = computed(() => (\n    !!props.multiple ||\n    (props.multiple == null && Array.isArray(modelValue.value))\n  ))\n  const model = computed({\n    get () {\n      const val = group ? group.modelValue.value : modelValue.value\n\n      return isMultiple.value\n        ? val.some((v: any) => props.valueComparator(v, trueValue.value))\n        : props.valueComparator(val, trueValue.value)\n    },\n    set (val: boolean) {\n      if (props.readonly) return\n\n      const currentValue = val ? trueValue.value : falseValue.value\n\n      let newVal = currentValue\n\n      if (isMultiple.value) {\n        newVal = val\n          ? [...wrapInArray(modelValue.value), currentValue]\n          : wrapInArray(modelValue.value).filter((item: any) => !props.valueComparator(item, trueValue.value))\n      }\n\n      if (group) {\n        group.modelValue.value = newVal\n      } else {\n        modelValue.value = newVal\n      }\n    },\n  })\n  const { textColorClasses, textColorStyles } = useTextColor(computed(() => {\n    return (\n      model.value &&\n      !props.error &&\n      !props.disabled\n    ) ? props.color : undefined\n  }))\n  const icon = computed(() => model.value ? props.trueIcon : props.falseIcon)\n\n  return {\n    group,\n    densityClasses,\n    trueValue,\n    falseValue,\n    model,\n    textColorClasses,\n    textColorStyles,\n    icon,\n  }\n}\n\nexport const VSelectionControl = genericComponent<new <T>(\n  props: {\n    modelValue?: T\n    'onUpdate:modelValue'?: (val: T) => any\n  },\n  slots: VSelectionControlSlots,\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VSelectionControl',\n\n  directives: { Ripple },\n\n  inheritAttrs: false,\n\n  props: makeVSelectionControlProps(),\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const {\n      group,\n      densityClasses,\n      icon,\n      model,\n      textColorClasses,\n      textColorStyles,\n      trueValue,\n    } = useSelectionControl(props)\n    const uid = getUid()\n    const id = computed(() => props.id || `input-${uid}`)\n    const isFocused = shallowRef(false)\n    const isFocusVisible = shallowRef(false)\n    const input = ref<HTMLInputElement>()\n\n    group?.onForceUpdate(() => {\n      if (input.value) {\n        input.value.checked = model.value\n      }\n    })\n\n    function onFocus (e: FocusEvent) {\n      isFocused.value = true\n      if (matchesSelector(e.target as HTMLElement, ':focus-visible') !== false) {\n        isFocusVisible.value = true\n      }\n    }\n\n    function onBlur () {\n      isFocused.value = false\n      isFocusVisible.value = false\n    }\n\n    function onInput (e: Event) {\n      if (props.readonly && group) {\n        nextTick(() => group.forceUpdate())\n      }\n      model.value = (e.target as HTMLInputElement).checked\n    }\n\n    useRender(() => {\n      const label = slots.label\n        ? slots.label({\n          label: props.label,\n          props: { for: id.value },\n        })\n        : props.label\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n\n      const inputNode = (\n        <input\n          ref={ input }\n          checked={ model.value }\n          disabled={ !!(props.readonly || props.disabled) }\n          id={ id.value }\n          onBlur={ onBlur }\n          onFocus={ onFocus }\n          onInput={ onInput }\n          aria-disabled={ !!(props.readonly || props.disabled) }\n          type={ props.type }\n          value={ trueValue.value }\n          name={ props.name }\n          aria-checked={ props.type === 'checkbox' ? model.value : undefined }\n          { ...inputAttrs }\n        />\n      )\n\n      return (\n        <div\n          class={[\n            'v-selection-control',\n            {\n              'v-selection-control--dirty': model.value,\n              'v-selection-control--disabled': props.disabled,\n              'v-selection-control--error': props.error,\n              'v-selection-control--focused': isFocused.value,\n              'v-selection-control--focus-visible': isFocusVisible.value,\n              'v-selection-control--inline': props.inline,\n            },\n            densityClasses.value,\n            props.class,\n          ]}\n          { ...rootAttrs }\n          style={ props.style }\n        >\n          <div\n            class={[\n              'v-selection-control__wrapper',\n              textColorClasses.value,\n            ]}\n            style={ textColorStyles.value }\n          >\n            { slots.default?.() }\n\n            <div\n              class={[\n                'v-selection-control__input',\n              ]}\n              v-ripple={ props.ripple && [\n                !props.disabled && !props.readonly,\n                null,\n                ['center', 'circle'],\n              ]}\n            >\n              { slots.input?.({\n                model,\n                textColorClasses,\n                textColorStyles,\n                inputNode,\n                icon: icon.value,\n                props: {\n                  onFocus,\n                  onBlur,\n                  id: id.value,\n                },\n              } satisfies SelectionControlSlot) ?? (\n                <>\n                  { icon.value && <VIcon key=\"icon\" icon={ icon.value } /> }\n\n                  { inputNode }\n                </>\n              )}\n            </div>\n          </div>\n\n          { label && (\n            <VLabel for={ id.value } clickable onClick={ (e: Event) => e.stopPropagation() }>\n              { label }\n            </VLabel>\n          )}\n        </div>\n      )\n    })\n\n    return {\n      isFocused,\n      input,\n    }\n  },\n})\n\nexport type VSelectionControl = InstanceType<typeof VSelectionControl>\n", "// Styles\nimport './VSelectionControlGroup.sass'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { provideDefaults } from '@/composables/defaults'\nimport { makeDensityProps } from '@/composables/density'\nimport { IconValue } from '@/composables/icons'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { makeThemeProps } from '@/composables/theme'\n\n// Utilities\nimport { computed, onScopeDispose, provide, toRef } from 'vue'\nimport { deepEqual, genericComponent, getUid, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { InjectionKey, PropType, Ref } from 'vue'\n\nexport interface VSelectionGroupContext {\n  modelValue: Ref<any>\n  forceUpdate: () => void\n  onForceUpdate: (fn: () => void) => void\n}\n\nexport const VSelectionControlGroupSymbol: InjectionKey<VSelectionGroupContext> = Symbol.for('vuetify:selection-control-group')\n\nexport const makeSelectionControlGroupProps = propsFactory({\n  color: String,\n  disabled: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  defaultsTarget: String,\n  error: Boolean,\n  id: String,\n  inline: Boolean,\n  falseIcon: IconValue,\n  trueIcon: IconValue,\n  ripple: {\n    type: Boolean,\n    default: true,\n  },\n  multiple: {\n    type: Boolean as PropType<boolean | null>,\n    default: null,\n  },\n  name: String,\n  readonly: Boolean,\n  modelValue: null,\n  type: String,\n  valueComparator: {\n    type: Function as PropType<typeof deepEqual>,\n    default: deepEqual,\n  },\n\n  ...makeComponentProps(),\n  ...makeDensityProps(),\n  ...makeThemeProps(),\n}, 'SelectionControlGroup')\n\nexport const makeVSelectionControlGroupProps = propsFactory({\n  ...makeSelectionControlGroupProps({\n    defaultsTarget: 'VSelectionControl',\n  }),\n}, 'VSelectionControlGroup')\n\nexport const VSelectionControlGroup = genericComponent()({\n  name: 'VSelectionControlGroup',\n\n  props: makeVSelectionControlGroupProps(),\n\n  emits: {\n    'update:modelValue': (val: any) => true,\n  },\n\n  setup (props, { slots }) {\n    const modelValue = useProxiedModel(props, 'modelValue')\n    const uid = getUid()\n    const id = computed(() => props.id || `v-selection-control-group-${uid}`)\n    const name = computed(() => props.name || id.value)\n\n    const updateHandlers = new Set<() => void>()\n    provide(VSelectionControlGroupSymbol, {\n      modelValue,\n      forceUpdate: () => {\n        updateHandlers.forEach(fn => fn())\n      },\n      onForceUpdate: cb => {\n        updateHandlers.add(cb)\n        onScopeDispose(() => {\n          updateHandlers.delete(cb)\n        })\n      },\n    })\n\n    provideDefaults({\n      [props.defaultsTarget]: {\n        color: toRef(props, 'color'),\n        disabled: toRef(props, 'disabled'),\n        density: toRef(props, 'density'),\n        error: toRef(props, 'error'),\n        inline: toRef(props, 'inline'),\n        modelValue,\n        multiple: computed(() => !!props.multiple || (props.multiple == null && Array.isArray(modelValue.value))),\n        name,\n        falseIcon: toRef(props, 'falseIcon'),\n        trueIcon: toRef(props, 'trueIcon'),\n        readonly: toRef(props, 'readonly'),\n        ripple: toRef(props, 'ripple'),\n        type: toRef(props, 'type'),\n        valueComparator: toRef(props, 'valueComparator'),\n      },\n    })\n\n    useRender(() => (\n      <div\n        class={[\n          'v-selection-control-group',\n          { 'v-selection-control-group--inline': props.inline },\n          props.class,\n        ]}\n        style={ props.style }\n        role={ props.type === 'radio' ? 'radiogroup' : undefined }\n      >\n        { slots.default?.() }\n      </div>\n    ))\n\n    return {}\n  },\n})\n\nexport type VSelectionControlGroup = InstanceType<typeof VSelectionControlGroup>\n", "// Components\nimport { makeVSelectionControlProps, VSelectionControl } from '@/components/VSelectionControl/VSelectionControl'\n\n// Composables\nimport { IconValue } from '@/composables/icons'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed } from 'vue'\nimport { genericComponent, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { VSelectionControlSlots } from '@/components/VSelectionControl/VSelectionControl'\n\nexport const makeVCheckboxBtnProps = propsFactory({\n  indeterminate: Boolean,\n  indeterminateIcon: {\n    type: IconValue,\n    default: '$checkboxIndeterminate',\n  },\n\n  ...makeVSelectionControlProps({\n    falseIcon: '$checkboxOff',\n    trueIcon: '$checkboxOn',\n  }),\n}, 'VCheckboxBtn')\n\nexport const VCheckboxBtn = genericComponent<VSelectionControlSlots>()({\n  name: 'VCheckboxBtn',\n\n  props: makeVCheckboxBtnProps(),\n\n  emits: {\n    'update:modelValue': (value: any) => true,\n    'update:indeterminate': (val: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const indeterminate = useProxiedModel(props, 'indeterminate')\n    const model = useProxiedModel(props, 'modelValue')\n\n    function onChange (v: any) {\n      if (indeterminate.value) {\n        indeterminate.value = false\n      }\n    }\n\n    const falseIcon = computed(() => {\n      return indeterminate.value\n        ? props.indeterminateIcon\n        : props.falseIcon\n    })\n\n    const trueIcon = computed(() => {\n      return indeterminate.value\n        ? props.indeterminateIcon\n        : props.trueIcon\n    })\n\n    useRender(() => {\n      const controlProps = omit(VSelectionControl.filterProps(props)[0], ['modelValue'])\n      return (\n        <VSelectionControl\n          { ...controlProps }\n          v-model={ model.value }\n        class={[\n          'v-checkbox-btn',\n          props.class,\n        ]}\n        style={ props.style }\n          type=\"checkbox\"\n          onUpdate:modelValue={ onChange }\n          falseIcon={ falseIcon.value }\n          trueIcon={ trueIcon.value }\n        aria-checked={ indeterminate.value ? 'mixed' : undefined }\n          v-slots={ slots }\n        />\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VCheckboxBtn = InstanceType<typeof VCheckboxBtn>\n", "// Styles\nimport './VMenu.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VDefaultsProvider } from '@/components/VDefaultsProvider'\nimport { VOverlay } from '@/components/VOverlay'\nimport { makeVOverlayProps } from '@/components/VOverlay/VOverlay'\n\n// Composables\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useProxiedModel } from '@/composables/proxiedModel'\nimport { useScopeId } from '@/composables/scopeId'\n\n// Utilities\nimport { computed, inject, mergeProps, nextTick, provide, ref, shallowRef, watch } from 'vue'\nimport { VMenuSymbol } from './shared'\nimport { focusableChildren, focusChild, genericComponent, getNextElement, getUid, omit, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { Component } from 'vue'\nimport type { OverlaySlots } from '@/components/VOverlay/VOverlay'\n\nexport const makeVMenuProps = propsFactory({\n  // TODO\n  // disableKeys: Boolean,\n  id: String,\n\n  ...omit(makeVOverlayProps({\n    closeDelay: 250,\n    closeOnContentClick: true,\n    locationStrategy: 'connected' as const,\n    openDelay: 300,\n    scrim: false,\n    scrollStrategy: 'reposition' as const,\n    transition: { component: VDialogTransition as Component },\n  }), ['absolute']),\n}, 'VMenu')\n\nexport const VMenu = genericComponent<OverlaySlots>()({\n  name: 'VMenu',\n\n  props: makeVMenuProps(),\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { scopeId } = useScopeId()\n\n    const uid = getUid()\n    const id = computed(() => props.id || `v-menu-${uid}`)\n\n    const overlay = ref<VOverlay>()\n\n    const parent = inject(VMenuSymbol, null)\n    const openChildren = shallowRef(0)\n    provide(VMenuSymbol, {\n      register () {\n        ++openChildren.value\n      },\n      unregister () {\n        --openChildren.value\n      },\n      closeParents () {\n        setTimeout(() => {\n          if (!openChildren.value) {\n            isActive.value = false\n            parent?.closeParents()\n          }\n        }, 40)\n      },\n    })\n\n    async function onFocusIn (e: FocusEvent) {\n      const before = e.relatedTarget as HTMLElement | null\n      const after = e.target as HTMLElement | null\n\n      await nextTick()\n\n      if (\n        isActive.value &&\n        before !== after &&\n        overlay.value?.contentEl &&\n        // We're the topmost menu\n        overlay.value?.globalTop &&\n        // It isn't the document or the menu body\n        ![document, overlay.value.contentEl].includes(after!) &&\n        // It isn't inside the menu body\n        !overlay.value.contentEl.contains(after)\n      ) {\n        const focusable = focusableChildren(overlay.value.contentEl)\n        focusable[0]?.focus()\n      }\n    }\n\n    watch(isActive, val => {\n      if (val) {\n        parent?.register()\n        document.addEventListener('focusin', onFocusIn, { once: true })\n      } else {\n        parent?.unregister()\n        document.removeEventListener('focusin', onFocusIn)\n      }\n    })\n\n    function onClickOutside () {\n      parent?.closeParents()\n    }\n\n    function onKeydown (e: KeyboardEvent) {\n      if (props.disabled) return\n\n      if (e.key === 'Tab') {\n        const nextElement = getNextElement(\n          focusableChildren(overlay.value?.contentEl as Element, false),\n          e.shiftKey ? 'prev' : 'next',\n          (el: HTMLElement) => el.tabIndex >= 0\n        )\n        if (!nextElement) {\n          isActive.value = false\n          overlay.value?.activatorEl?.focus()\n        }\n      }\n    }\n\n    function onActivatorKeydown (e: KeyboardEvent) {\n      if (props.disabled) return\n\n      const el = overlay.value?.contentEl\n      if (el && isActive.value) {\n        if (e.key === 'ArrowDown') {\n          e.preventDefault()\n          focusChild(el, 'next')\n        } else if (e.key === 'ArrowUp') {\n          e.preventDefault()\n          focusChild(el, 'prev')\n        }\n      } else if (['ArrowDown', 'ArrowUp'].includes(e.key)) {\n        isActive.value = true\n        e.preventDefault()\n        setTimeout(() => setTimeout(() => onActivatorKeydown(e)))\n      }\n    }\n\n    const activatorProps = computed(() =>\n      mergeProps({\n        'aria-haspopup': 'menu',\n        'aria-expanded': String(isActive.value),\n        'aria-owns': id.value,\n        onKeydown: onActivatorKeydown,\n      }, props.activatorProps)\n    )\n\n    useRender(() => {\n      const [overlayProps] = VOverlay.filterProps(props)\n\n      return (\n        <VOverlay\n          ref={ overlay }\n          class={[\n            'v-menu',\n            props.class,\n          ]}\n          style={ props.style }\n          { ...overlayProps }\n          v-model={ isActive.value }\n          absolute\n          activatorProps={ activatorProps.value }\n          onClick:outside={ onClickOutside }\n          onKeydown={ onKeydown }\n          { ...scopeId }\n        >\n          {{\n            activator: slots.activator,\n            default: (...args) => (\n              <VDefaultsProvider root=\"VMenu\">\n                { slots.default?.(...args) }\n              </VDefaultsProvider>\n            ),\n          }}\n        </VOverlay>\n      )\n    })\n\n    return forwardRefs({ id, Î¨openChildren: openChildren }, overlay)\n  },\n})\n\nexport type VMenu = InstanceType<typeof VMenu>\n", "// Styles\nimport './VVirtualScroll.sass'\n\n// Components\nimport { VVirtualScrollItem } from './VVirtualScrollItem'\n\n// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { useToggleScope } from '@/composables/toggleScope'\nimport { makeVirtualProps, useVirtual } from '@/composables/virtual'\n\n// Utilities\nimport { onMounted, onScopeDispose, toRef } from 'vue'\nimport {\n  convertToUnit,\n  genericComponent,\n  getCurrentInstance,\n  getScrollParent,\n  propsFactory,\n  useRender,\n} from '@/util'\n\n// Types\nimport type { PropType, Ref } from 'vue'\nimport type { GenericProps } from '@/util'\n\nexport interface VVirtualScrollSlot<T> {\n  item: T\n  index: number\n}\n\nexport const makeVVirtualScrollProps = propsFactory({\n  items: {\n    type: Array as PropType<readonly unknown[]>,\n    default: () => ([]),\n  },\n  renderless: Boolean,\n\n  ...makeVirtualProps(),\n  ...makeComponentProps(),\n  ...makeDimensionProps(),\n}, 'VVirtualScroll')\n\nexport const VVirtualScroll = genericComponent<new <T, Renderless extends boolean = false>(\n  props: {\n    items?: readonly T[]\n    renderless?: Renderless\n  },\n  slots: {\n    default: VVirtualScrollSlot<T> & (Renderless extends true ? {\n      itemRef: Ref<HTMLElement | undefined>\n    } : {})\n  }\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VVirtualScroll',\n\n  props: makeVVirtualScrollProps(),\n\n  setup (props, { slots }) {\n    const vm = getCurrentInstance('VVirtualScroll')\n    const { dimensionStyles } = useDimension(props)\n    const {\n      containerRef,\n      handleScroll,\n      handleItemResize,\n      scrollToIndex,\n      paddingTop,\n      paddingBottom,\n      computedItems,\n    } = useVirtual(props, toRef(props, 'items'))\n\n    useToggleScope(() => props.renderless, () => {\n      onMounted(() => {\n        containerRef.value = getScrollParent(vm.vnode.el as HTMLElement, true)\n        containerRef.value?.addEventListener('scroll', handleScroll)\n      })\n      onScopeDispose(() => {\n        containerRef.value?.removeEventListener('scroll', handleScroll)\n      })\n    })\n\n    useRender(() => {\n      const children = computedItems.value.map(item => (\n        <VVirtualScrollItem\n          key={ item.index }\n          renderless={ props.renderless }\n          onUpdate:height={ height => handleItemResize(item.index, height) }\n        >\n          { slotProps => slots.default?.({ item: item.raw, index: item.index, ...slotProps }) }\n        </VVirtualScrollItem>\n      ))\n\n      return props.renderless ? (\n        <>\n          <div class=\"v-virtual-scroll__spacer\" style={{ paddingTop: convertToUnit(paddingTop.value) }} />\n          { children }\n          <div class=\"v-virtual-scroll__spacer\" style={{ paddingBottom: convertToUnit(paddingBottom.value) }} />\n        </>\n      ) : (\n        <div\n          ref={ containerRef }\n          class={[\n            'v-virtual-scroll',\n            props.class,\n          ]}\n          onScroll={ handleScroll }\n          style={[\n            dimensionStyles.value,\n            props.style,\n          ]}\n        >\n          <div\n            class=\"v-virtual-scroll__container\"\n            style={{\n              paddingTop: convertToUnit(paddingTop.value),\n              paddingBottom: convertToUnit(paddingBottom.value),\n            }}\n          >\n            { children }\n          </div>\n        </div>\n      )\n    })\n\n    return {\n      scrollToIndex,\n    }\n  },\n})\n\nexport type VVirtualScroll = InstanceType<typeof VVirtualScroll>\n", "// Composables\nimport { makeComponentProps } from '@/composables/component'\nimport { useResizeObserver } from '@/composables/resizeObserver'\n\n// Utilities\nimport { watch } from 'vue'\nimport { genericComponent, propsFactory, useRender } from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\nimport type { GenericProps } from '@/util'\n\nexport const makeVVirtualScrollItemProps = propsFactory({\n  renderless: Boolean,\n\n  ...makeComponentProps(),\n}, 'VVirtualScrollItem')\n\nexport const VVirtualScrollItem = genericComponent<new <Renderless extends boolean = false>(\n  props: {\n    renderless?: Renderless\n  },\n  slots: {\n    default: Renderless extends true ? {\n      itemRef: Ref<HTMLElement | undefined>\n    } : never\n  }\n) => GenericProps<typeof props, typeof slots>>()({\n  name: 'VVirtualScrollItem',\n\n  inheritAttrs: false,\n\n  props: makeVVirtualScrollItemProps(),\n\n  emits: {\n    'update:height': (height: number) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { resizeRef, contentRect } = useResizeObserver(undefined, 'border')\n\n    watch(() => contentRect.value?.height, height => {\n      if (height != null) emit('update:height', height)\n    })\n\n    useRender(() => props.renderless ? (\n      <>\n        { slots.default?.({ itemRef: resizeRef }) }\n      </>\n    ) : (\n      <div\n        ref={ resizeRef }\n        class={[\n          'v-virtual-scroll__item',\n          props.class,\n        ]}\n        style={ props.style }\n        { ...attrs }\n      >\n        { (slots.default as any)?.() }\n      </div>\n    ))\n  },\n})\n", "// Composables\nimport { useDisplay } from '@/composables/display'\nimport { useResizeObserver } from '@/composables/resizeObserver'\n\n// Utilities\nimport { computed, ref, shallowRef, watch, watchEffect } from 'vue'\nimport {\n  clamp,\n  createRange,\n  propsFactory,\n} from '@/util'\n\n// Types\nimport type { Ref } from 'vue'\n\nconst UP = -1\nconst DOWN = 1\n\ntype VirtualProps = {\n  itemHeight?: number | string\n}\n\nexport const makeVirtualProps = propsFactory({\n  itemHeight: {\n    type: [Number, String],\n    default: 48,\n  },\n}, 'virtual')\n\nexport function useVirtual <T> (props: VirtualProps, items: Ref<readonly T[]>, offset?: Ref<number>) {\n  const first = shallowRef(0)\n  const baseItemHeight = shallowRef(props.itemHeight)\n  const itemHeight = computed({\n    get: () => parseInt(baseItemHeight.value ?? 0, 10),\n    set (val) {\n      baseItemHeight.value = val\n    },\n  })\n  const containerRef = ref<HTMLElement>()\n  const { resizeRef, contentRect } = useResizeObserver()\n  watchEffect(() => {\n    resizeRef.value = containerRef.value\n  })\n  const display = useDisplay()\n\n  const sizeMap = new Map<any, number>()\n  let sizes = Array.from<number | null>({ length: items.value.length })\n  const visibleItems = computed(() => {\n    const height = (\n      !contentRect.value || containerRef.value === document.documentElement\n        ? display.height.value\n        : contentRect.value.height\n    ) - (offset?.value ?? 0)\n    return Math.ceil((height / itemHeight.value) * 1.7 + 1)\n  })\n\n  function handleItemResize (index: number, height: number) {\n    itemHeight.value = Math.max(itemHeight.value, height)\n    sizes[index] = height\n    sizeMap.set(items.value[index], height)\n  }\n\n  function calculateOffset (index: number) {\n    return sizes.slice(0, index)\n      .reduce((acc, val) => acc! + (val || itemHeight.value), 0)!\n  }\n\n  function calculateMidPointIndex (scrollTop: number) {\n    const end = items.value.length\n\n    let middle = 0\n    let middleOffset = 0\n    while (middleOffset < scrollTop && middle < end) {\n      middleOffset += sizes[middle++] || itemHeight.value\n    }\n\n    return middle - 1\n  }\n\n  let lastScrollTop = 0\n  function handleScroll () {\n    if (!containerRef.value || !contentRect.value) return\n\n    const height = contentRect.value.height - 56\n    const scrollTop = containerRef.value.scrollTop\n    const direction = scrollTop < lastScrollTop ? UP : DOWN\n\n    const midPointIndex = calculateMidPointIndex(scrollTop + height / 2)\n    const buffer = Math.round(visibleItems.value / 3)\n    const firstIndex = midPointIndex - buffer\n    const lastIndex = first.value + (buffer * 2) - 1\n    if (direction === UP && midPointIndex <= lastIndex) {\n      first.value = clamp(firstIndex, 0, items.value.length)\n    } else if (direction === DOWN && midPointIndex >= lastIndex) {\n      first.value = clamp(firstIndex, 0, items.value.length - visibleItems.value)\n    }\n\n    lastScrollTop = scrollTop\n  }\n\n  function scrollToIndex (index: number) {\n    if (!containerRef.value) return\n\n    const offset = calculateOffset(index)\n    containerRef.value.scrollTop = offset\n  }\n\n  const last = computed(() => Math.min(items.value.length, first.value + visibleItems.value))\n  const computedItems = computed(() => {\n    return items.value.slice(first.value, last.value).map((item, index) => ({\n      raw: item,\n      index: index + first.value,\n    }))\n  })\n  const paddingTop = computed(() => calculateOffset(first.value))\n  const paddingBottom = computed(() => calculateOffset(items.value.length) - calculateOffset(last.value))\n\n  watch(() => items.value.length, () => {\n    sizes = createRange(items.value.length).map(() => itemHeight.value)\n    sizeMap.forEach((height, item) => {\n      const index = items.value.indexOf(item)\n      if (index === -1) {\n        sizeMap.delete(item)\n      } else {\n        sizes[index] = height\n      }\n    })\n  })\n\n  return {\n    containerRef,\n    computedItems,\n    itemHeight,\n    paddingTop,\n    paddingBottom,\n    scrollToIndex,\n    handleScroll,\n    handleItemResize,\n  }\n}\n", "// Utilities\nimport { shallowRef, watch } from 'vue'\n\n// Types\nimport type { Ref } from 'vue'\nimport type { VList } from '@/components/VList'\nimport type { VTextField } from '@/components/VTextField'\n\nexport function useScrolling (listRef: Ref<VList | undefined>, textFieldRef: Ref<VTextField | undefined>) {\n  const isScrolling = shallowRef(false)\n  let scrollTimeout: number\n  function onListScroll (e: Event) {\n    cancelAnimationFrame(scrollTimeout)\n    isScrolling.value = true\n    scrollTimeout = requestAnimationFrame(() => {\n      scrollTimeout = requestAnimationFrame(() => {\n        isScrolling.value = false\n      })\n    })\n  }\n  async function finishScrolling () {\n    await new Promise(resolve => requestAnimationFrame(resolve))\n    await new Promise(resolve => requestAnimationFrame(resolve))\n    await new Promise(resolve => requestAnimationFrame(resolve))\n    await new Promise<void>(resolve => {\n      if (isScrolling.value) {\n        const stop = watch(isScrolling, () => {\n          stop()\n          resolve()\n        })\n      } else resolve()\n    })\n  }\n  async function onListKeydown (e: KeyboardEvent) {\n    if (e.key === 'Tab') {\n      textFieldRef.value?.focus()\n    }\n\n    if (!['PageDown', 'PageUp', 'Home', 'End'].includes(e.key)) return\n    const el: HTMLElement = listRef.value?.$el\n    if (!el) return\n\n    if (e.key === 'Home' || e.key === 'End') {\n      el.scrollTo({\n        top: e.key === 'Home' ? 0 : el.scrollHeight,\n        behavior: 'smooth',\n      })\n    }\n\n    await finishScrolling()\n\n    const children = el.querySelectorAll(':scope > :not(.v-virtual-scroll__spacer)')\n\n    if (e.key === 'PageDown' || e.key === 'Home') {\n      const top = el.getBoundingClientRect().top\n      for (const child of children) {\n        if (child.getBoundingClientRect().top >= top) {\n          (child as HTMLElement).focus()\n          break\n        }\n      }\n    } else {\n      const bottom = el.getBoundingClientRect().bottom\n      for (const child of [...children].reverse()) {\n        if (child.getBoundingClientRect().bottom <= bottom) {\n          (child as HTMLElement).focus()\n          break\n        }\n      }\n    }\n  }\n\n  return { onListScroll, onListKeydown }\n}\n"],
  "mappings": "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",
  "names": ["VSelectionControlGroupSymbol", "Symbol", "for", "makeSelectionControlGroupProps", "propsFactory", "color", "String", "disabled", "type", "Boolean", "default", "defaultsTarget", "error", "id", "inline", "falseIcon", "IconValue", "trueIcon", "ripple", "multiple", "name", "readonly", "modelValue", "valueComparator", "Function", "deepEqual", "makeComponentProps", "makeDensityProps", "makeThemeProps", "makeVSelectionControlGroupProps", "VSelectionControlGroup", "genericComponent", "props", "emits", "val", "setup", "_ref", "slots", "useProxiedModel", "uid", "getUid", "computed", "value", "updateHandlers", "Set", "provide", "forceUpdate", "forEach", "fn", "onForceUpdate", "cb", "add", "onScopeDispose", "delete", "provideDefaults", "toRef", "density", "Array", "isArray", "useRender", "_createVNode", "class", "style", "undefined", "makeVSelectionControlProps", "propsFactory", "label", "String", "trueValue", "falseValue", "value", "makeComponentProps", "makeSelectionControlGroupProps", "useSelectionControl", "props", "group", "inject", "VSelectionControlGroupSymbol", "undefined", "densityClasses", "useDensity", "modelValue", "useProxiedModel", "computed", "isMultiple", "multiple", "Array", "isArray", "model", "get", "val", "some", "v", "valueComparator", "set", "readonly", "currentValue", "newVal", "wrapInArray", "filter", "item", "textColorClasses", "textColorStyles", "useTextColor", "error", "disabled", "color", "icon", "trueIcon", "falseIcon", "VSelectionControl", "genericComponent", "name", "directives", "Ripple", "inheritAttrs", "emits", "setup", "_ref", "attrs", "slots", "uid", "getUid", "id", "isFocused", "shallowRef", "isFocusVisible", "input", "ref", "onForceUpdate", "checked", "onFocus", "e", "matchesSelector", "target", "onBlur", "onInput", "nextTick", "forceUpdate", "useRender", "for", "rootAttrs", "inputAttrs", "filterInputAttrs", "inputNode", "_createVNode", "_mergeProps", "type", "inline", "class", "style", "default", "_withDirectives", "_Fragment", "VIcon", "_resolveDirective", "ripple", "VLabel", "stopPropagation", "makeVCheckboxBtnProps", "propsFactory", "indeterminate", "Boolean", "indeterminateIcon", "type", "IconValue", "default", "makeVSelectionControlProps", "falseIcon", "trueIcon", "VCheckboxBtn", "genericComponent", "name", "props", "emits", "value", "val", "setup", "_ref", "slots", "useProxiedModel", "model", "onChange", "v", "computed", "useRender", "controlProps", "omit", "VSelectionControl", "filterProps", "_createVNode", "_mergeProps", "$event", "class", "style", "undefined", "makeVCheckboxProps", "propsFactory", "makeVInputProps", "omit", "makeVCheckboxBtnProps", "VCheckbox", "genericComponent", "name", "inheritAttrs", "props", "emits", "value", "focused", "setup", "_ref", "attrs", "slots", "model", "useProxiedModel", "isFocused", "focus", "blur", "useFocus", "uid", "getUid", "id", "computed", "useRender", "rootAttrs", "controlAttrs", "filterInputAttrs", "inputProps", "_1", "VInput", "filterProps", "checkboxProps", "_2", "VCheckboxBtn", "_createVNode", "_mergeProps", "class", "$event", "style", "default", "_ref2", "messagesId", "isDisabled", "isReadonly", "makeVMenuProps", "propsFactory", "id", "String", "omit", "makeVOverlayProps", "closeDelay", "closeOnContentClick", "locationStrategy", "openDelay", "scrim", "scrollStrategy", "transition", "component", "VDialogTransition", "VMenu", "genericComponent", "name", "props", "emits", "value", "setup", "_ref", "slots", "isActive", "useProxiedModel", "scopeId", "useScopeId", "uid", "getUid", "computed", "overlay", "ref", "parent", "inject", "VMenuSymbol", "openChildren", "shallowRef", "provide", "register", "unregister", "closeParents", "setTimeout", "onFocusIn", "e", "before", "relatedTarget", "after", "target", "nextTick", "contentEl", "globalTop", "document", "includes", "contains", "focusable", "focusableChildren", "focus", "watch", "val", "addEventListener", "once", "removeEventListener", "onClickOutside", "onKeydown", "disabled", "key", "nextElement", "getNextElement", "shiftKey", "el", "tabIndex", "activatorEl", "onActivatorKeydown", "preventDefault", "focusChild", "activatorProps", "mergeProps", "useRender", "overlayProps", "VOverlay", "filterProps", "_createVNode", "_mergeProps", "class", "style", "$event", "activator", "default", "_len", "arguments", "length", "args", "Array", "_key", "VDefaultsProvider", "forwardRefs", "Î¨openChildren", "makeVVirtualScrollItemProps", "propsFactory", "renderless", "Boolean", "makeComponentProps", "VVirtualScrollItem", "genericComponent", "name", "inheritAttrs", "props", "emits", "height", "setup", "_ref", "attrs", "emit", "slots", "resizeRef", "contentRect", "useResizeObserver", "undefined", "watch", "value", "useRender", "_createVNode", "_Fragment", "default", "itemRef", "_mergeProps", "class", "style", "UP", "DOWN", "makeVirtualProps", "propsFactory", "itemHeight", "type", "Number", "String", "default", "useVirtual", "props", "items", "offset", "first", "shallowRef", "baseItemHeight", "computed", "get", "parseInt", "value", "set", "val", "containerRef", "ref", "resizeRef", "contentRect", "useResizeObserver", "watchEffect", "display", "useDisplay", "sizeMap", "Map", "sizes", "Array", "from", "length", "visibleItems", "height", "document", "documentElement", "Math", "ceil", "handleItemResize", "index", "max", "calculateOffset", "slice", "reduce", "acc", "calculateMidPointIndex", "scrollTop", "end", "middle", "middleOffset", "lastScrollTop", "handleScroll", "direction", "midPointIndex", "buffer", "round", "firstIndex", "lastIndex", "clamp", "scrollToIndex", "last", "min", "computedItems", "map", "item", "raw", "paddingTop", "paddingBottom", "watch", "createRange", "forEach", "indexOf", "delete", "makeVVirtualScrollProps", "propsFactory", "items", "type", "Array", "default", "renderless", "Boolean", "makeVirtualProps", "makeComponentProps", "makeDimensionProps", "VVirtualScroll", "genericComponent", "name", "props", "setup", "_ref", "slots", "vm", "getCurrentInstance", "dimensionStyles", "useDimension", "containerRef", "handleScroll", "handleItemResize", "scrollToIndex", "paddingTop", "paddingBottom", "computedItems", "useVirtual", "toRef", "useToggleScope", "onMounted", "value", "getScrollParent", "vnode", "el", "addEventListener", "onScopeDispose", "removeEventListener", "useRender", "children", "map", "item", "_createVNode", "VVirtualScrollItem", "index", "height", "slotProps", "raw", "_Fragment", "convertToUnit", "class", "style", "useScrolling", "listRef", "textFieldRef", "isScrolling", "shallowRef", "scrollTimeout", "onListScroll", "e", "cancelAnimationFrame", "value", "requestAnimationFrame", "finishScrolling", "Promise", "resolve", "stop", "watch", "onListKeydown", "key", "focus", "includes", "el", "$el", "scrollTo", "top", "scrollHeight", "behavior", "children", "querySelectorAll", "getBoundingClientRect", "child", "bottom", "reverse", "makeSelectProps", "propsFactory", "chips", "Boolean", "closableChips", "closeText", "type", "String", "default", "openText", "eager", "hideNoData", "hideSelected", "menu", "menuIcon", "IconValue", "menuProps", "Object", "multiple", "noDataText", "openOnClear", "valueComparator", "Function", "deepEqual", "itemColor", "makeItemsProps", "itemChildren", "makeVSelectProps", "omit", "makeVTextFieldProps", "modelValue", "role", "makeTransitionProps", "transition", "component", "VDialogTransition", "VSelect", "genericComponent", "name", "props", "emits", "focused", "val", "setup", "_ref", "slots", "t", "useLocale", "vTextFieldRef", "ref", "vMenuRef", "vVirtualScrollRef", "_menu", "useProxiedModel", "computed", "get", "value", "set", "v", "Î¨openChildren", "items", "transformIn", "transformOut", "useItems", "model", "wrapInArray", "transformed", "form", "useForm", "selections", "map", "find", "item", "itemRawValue", "getPropertyFromItem", "raw", "itemValue", "modelRawValue", "undefined", "returnObject", "selected", "selection", "isFocused", "shallowRef", "label", "keyboardLookupPrefix", "keyboardLookupLastTime", "displayItems", "filter", "some", "s", "menuDisabled", "length", "readonly", "isReadonly", "listRef", "onListScroll", "onListKeydown", "useScrolling", "onClear", "e", "onMousedownControl", "onKeydown", "key", "includes", "preventDefault", "focus", "KEYBOARD_LOOKUP_THRESHOLD", "checkPrintable", "isPrintableChar", "noModifier", "ctrlKey", "metaKey", "altKey", "now", "performance", "toLowerCase", "title", "startsWith", "select", "index", "findIndex", "splice", "onBlur", "$el", "contains", "relatedTarget", "onAfterLeave", "onFocusin", "onModelUpdate", "matchesSelector", "watch", "IN_BROWSER", "window", "requestAnimationFrame", "scrollToIndex", "useRender", "hasChips", "chip", "hasList", "isDirty", "textFieldProps", "VTextField", "filterProps", "placeholder", "persistentPlaceholder", "_createVNode", "_mergeProps", "join", "$event", "externalValue", "class", "style", "_Fragment", "VMenu", "VList", "color", "VListItem", "VVirtualScroll", "_ref2", "itemRef", "itemProps", "mergeProps", "onClick", "prepend", "_ref3", "isSelected", "VCheckboxBtn", "prependIcon", "VIcon", "onChipClose", "stopPropagation", "slotProps", "onMousedown", "VChip", "VDefaultsProvider", "closable", "size", "text", "_createTextVNode", "_len", "arguments", "args", "Array", "_key", "forwardRefs"]
}
